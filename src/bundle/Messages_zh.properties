lang_switch=English

index_title=Janice Lin | Portfolio
project_1_title=EMS | Janice Lin
project_2_title=Remote IO App | Janice Lin
project_3_title=Design System | Janice Lin
project_4_title=Smart Tunnel Lighting Experience | Janice Lin
about_title=About | Janice Lin

navbar/work=專案
navbar/about=關於
navbar/resume=履歷

footer/email=信箱
footer/linkedIn=LinkedIn
footer/medium=Medium

index/name=嗨！我是 Janice
index/job_title=UI/UX 設計師
index/intro_1=我是一個有設計、研究及教育背景的設計師。熱衷於
index/intro_point=觀察和傾聽人們的意見
index/intro_2=，並將想法轉化成產品的靈感。

index/project_title_1=能源管理系統
index/project_title_2=Remote IO App
index/project_title_3=設計系統
index/project_title_4=智慧隧道路燈設計經驗

index/project_brief_1=能源管理系统 (Energy management systems, EMS) 藉由蒐集現場測量數據，分析電力需求，將複雜的資訊可視化提供给使用者。並進行遠端控制與監測，以達到能源管理、節約能源和省錢的目標。
index/project_brief_2=Remote I/O 具有數據採集及傳送的通訊功能，已被應用於許多場景，如水箱深度、警報開關、能源管理系統等，支持多種類型的輸入輸出。
index/project_brief_3=以MUI為基礎，我們的設計系統是一套可以重複使用的元件與規範，可以組合成介面與互動。
index/project_brief_4=隧道照明的目的在確保駕駛者於行駛隧道時，能獲致與鄰接道路相同之行車安全與舒適程度。

index/project_tag_1=UI/UX 設計
index/project_tag_2=研究
index/project_tag_3=產品管理
index/project_tag_4=移動裝置
index/project_tag_5=SaaS
index/project_tag_6=設計元件庫
index/project_tag_7=跨部門合作
index/project_tag_8=藍芽
index/project_year_1=2021 - 2022
index/project_year_2=2022


about/name	=	嗨！我是林家鈴
about/job_title	=	UI/UX designer
about/text_1	=	我是一位有設計、研究和教育背景的 UI/UX 設計師。熱衷於觀察和傾聽人們的意見，並將想法內化後變成產品的靈感。
about/text_2	=	在成為 UI/UX 設計師，我在自殺防治中心擔任資訊專員，協助醫護人員解決平台問題，在這個經驗中發現自己對於產品設計的熱情。作為一個設計師，我喜歡透過設計思考與流程解決複雜的問題，並藉由參加讀書會與關注設計趨勢來不斷提升能力。
about/text_3	=	我樂觀且積極，總是把事情往好的方向想。我期待未來可以跟一個熱情又有趣的團隊一起工作，為更多人解決問題。放假時，你可能會在球場、山上或水下遇見我 :D
about/text_4	=	歡迎聊聊
about/text_5	=	LinkedIn
about/text_6	=	信箱	
about/resume_btn	=	我的履歷




project_1/project_title=能源管理系統
project_1/team=團隊
project_1/team_text=1 專案經理, 1 前端工程師, 2 後端工程師
project_1/role=角色
project_1/role_text=UI/UX 設計師
project_1/time=時間
project_1/time_text=2021-2022
project_1/contribution=貢獻
project_1/contribution_1=IoT 產品競品分析，與團隊討論提出產品架構
project_1/contribution_2=流程梳理與測試，保持產品操作一致性與足夠彈性
project_1/contribution_3=歸納統整過去專案使用的元件與規則，建立設計系統
project_1/background=背景與問題
project_1/background_text_1=公司以接案為主要商業模式，為客戶打造專門的客制系統。因未來政策，無法繼續增加人力維護多個系統，因此設計一套能夠整合過去專案內容及滿足未來需求的能源管理 SaaS(Software as a Service) 產品。
project_1/background_text_2=此能源管理系統 (Energy Management System, EMS) 蒐集案場數據，用以評估用電需求，並以資訊圖表方式呈現給使用者檢視。使用者可以遠端監控，或進行特定時間的排程，以達到能源管理、節能省成本的目標。
project_1/background_text_3=此 SaaS 產品包含三個系統跟一個 App，分別給不同目標使用者：
project_1/background_text_4=資料蒐集的雲端系統
project_1/background_text_5=案場管理的地端系統
project_1/background_text_6=工班部屬的施工系統及App
project_1/result=結果
project_1/result_title_1=降低內部人員學習負荷
project_1/result_text_1=公司過去皆為接案的商業模式，每個專案都具有獨特性與商業邏輯，在維護上需要先了解此專案的背景知識才能理解其系統操作，人力學習成本佔過多時間。整合到此產品後，每個專案的操作模式相同，降低了內部人員的學習負荷。
project_1/result_title_2=建立 Design system，維持公司產品一致性，加速開發
project_1/result_text_2=搜集、整理及比較過去所有專案使用過的元件，設計一套公司的設計系統。提升公司品牌意識、加速未來開發時間，並作為提供外包商的開發規範。
project_1/result_title_3=整合公司散落的專案數據，以利未來資料運用
project_1/result_text_3=各專案系統設計邏輯皆不同，蒐集之數據也不同。此產品統一數據蒐集的格式與架構，以利未來進行數據資料分析、檢視與查證。
project_1/challenge=挑戰
project_1/challenge_title_1=了解過去專案並接手設計
project_1/challenge_text_1=必須接手別人的設計並了解公司過去所有專案，在沒有其他設計師可以手把手詢問的狀況下，快速熟悉公司專案與前設計師的設計邏輯，是轉職後的第一個挑戰。
project_1/challenge_title_2=新的商業模式
project_1/challenge_text_2=過去接案為主的商業模式，都是 100% 客製化。這次要將公司過去經驗提取成一套 SaaS 產品並執行新的商業模式，對於不熟悉此產業及沒有產品設計經驗的我來說是一大挑戰。
project_1/process=過程
project_1/research=研究發想
project_1/research_text_1=基於過去專案經驗，已知基本 IoT 產品需要哪些功能。為了更進一步了解目前市場趨勢與定位，進行了競品分析。公司產品使用者除了國內亦有國外客戶，在競品選擇上除了台灣以外﹐也參考國外的產品。
project_1/research_text_2=因為大部分競品都是 B2B，搭配三種方法研究這些產品，第一是直接註冊操作；無法註冊就查看產品使用手冊；再來則是加入產品的討論社團，實際觀察使用者遇到的問題。
project_1/research_text_3=經過研究與討論後，產品方向為
project_1/research_text_4=提供內部人員彈性設定，符合 80% 客戶需求
project_1/research_text_5=快速的維護與安裝功能
project_1/research_text_6=大量監控與測試需求
project_1/research_text_7=因應目標族群使用情境，秉持著
project_1/research_text_8=可以快速操作、快速檢視且流程最簡化
project_1/research_text_9=的原則進行設計。
project_1/framework=系統架構
project_1/framework_text=整個產品以三個系統組成，包含資料蒐集及監控的雲端系統、管理及測試案場的地端系統以及前期部屬的施工系統，再依據客戶需求提供對應的系統功能。
project_1/flow=流程梳理
project_1/flow_text=過去專案設計的系統在操作上都不同，相當耗費內部人員學習與了解的時間。統整與比較相同流程中的不同的操作方式，發展出一套通用且符合使用者操作的流程。
project_1/design_iterate=設計迭代
project_1/design_iterate_title_1=原方案
project_1/design_iterate_text_1=UI展示階層雖符合部分使用者，卻不符合測試人員的快速操作需求
project_1/design_iterate_title_2=第一次方案: card+reason
project_1/design_iterate_text_2=以卡片為檢視方式，顯示重點資訊，測試人員可以快速檢視與選取問題設備，進行排修。雖然此專案適合，在未來通用產品上仍無法滿足所有需求。
project_1/design_iterate_title_3=解決方案比較
project_1/design_iterate_text_3=將我們所有的需求列出，並與四個解決方案比較，最後我們選擇可以解決最多需求的方案。
project_1/design_iterate_title_4=最終方案: 攤平table
project_1/design_iterate_text_4=比較提出的四個方案與考慮未來開發彈性，最後選擇一階層的 table 展示，滿足快速操作與檢視需求。此方案滿足了案場人員的一般操作，也滿足了測試人員的進階需求。
project_1/design_guideline=設計規範
project_1/design_guideline_text=為加速未來開發及外包商應用，團隊有共識要製作設計系統後，我開始進行所有專案元件的分類整理、再參考各大公司的設計系統，列出我們需要的元件與其變化，與團隊確認後便開始進行設計。我們是使用 Storybook 讓大家可以上去檢視進度與測試，外包商則是採用 npm 的方式下載應用。
project_1/final_design=最終設計
project_1/final_design_title_1=Cloud, Edge - 滿足過去與未來專案的layout
project_1/final_design_text_1=採用全部攤平的方式解決設備有階層關係無法搜尋與下控的問題，很幸運可以搭配執行中的專案進行測試，找出最適合目前的解決方案，也滿足過去專案需求。
project_1/final_design_title_2=Deploy - 管理未來多廠商多設備與多解決方案，發展出Config 概念，可自行調整，富有彈性
project_1/final_design_text_2=產品花最多時間討論及調整的地方就是這個功能，為了讓內部人員及工程師不再因不同客戶進行多餘的客製，從專案經驗中提取出可以進行設定的地方，並多次與其他團隊及工程師進行架構及可行性討論，最終以「設備」、「設備解決方案」及「資料同步解決方案」為主要設定項目，達到可以自由設定客戶的設備及連接方式等需求。
project_1/final_design_title_3=Edge - FAE tool
project_1/final_design_text_3=對於測試人員工作與設備的不熟悉，讓我、PM及工程師釐清及溝通很久。一開始我們一直想要用二分法快速解決問題，卻導致方向偏離，最後重新了解設備運作才讓我們找到適合的解決方案。
project_1/final_design_title_4=角色很多很複雜，直接法展出一套權限機制
project_1/final_design_text_4=過去專案曾使用過系統固定角色功能、針對帳號設定增刪查改及跟上級組織相同設定等權限設計。考慮到未來擴充性與客戶開通功能，最後方案為可以針對特定功能頁面進行不同操作的權限設定。
project_1/take_away=學到什麼
project_1/take_away_title_1=初入陌生領域，理解限制與問題，合力解決
project_1/take_away_text_1=入職後第一個專案，對於物聯網的技術與領域知識非常不熟悉，花了一段時間了解專案內容，包含：使用者是誰、目前資源、開發階段、系統操作邏輯、資料流串接邏輯等。作為系統唯一的設計師，必須在每次的修改中，先了解硬體與軟體間的溝通方式與限制，再理解現場操作問題，將工程的限制與PM帶回來的需求，與團隊進行整合討論，找出共同點和對比，設計一個通用和靈活的解決方案。
project_1/take_away_title_2=適時打破框架，符合實際操作需求
project_1/take_away_text_2=平常覺得有順序的操作與結構清楚的畫面非常重要，但有些時候卻也限制了操作。在競品分析中，發現各產品的優劣勢與特點，獲得一些靈感啟發，在這次測試迭代中，了解適時打破原有設計規則及現場實際空間的侷限，更符合實際操作需求，還增添了未來擴充性。
project_1/take_away_title_3=嘗試產品需求文件（PRD）撰寫
project_1/take_away_text_3=在設計此產品時，嘗試撰寫了一小部分的產品需求文件（PRD），這幫助我更理解 PM 在文件撰寫的邏輯，以及不同角色需要看的內容及格式，也更認同文件有助於團隊溝通和範圍控制。


project_2/project_title	=	Remote IO App
project_2/team	=	團隊
project_2/team_text	=	1 專案經理、2 App 工程師、1 韌體工程師
project_2/role	=	角色
project_2/role_text	=	UI/UX 設計師
project_2/time	=	時間
project_2/time_text	=	2022
project_2/contribution	=	貢獻
project_2/contribution_1	=	理解 Modbus table，轉化為易讀易用的使用者介面
project_2/contribution_2	=	相關產品競品分析，功能與介面測試
project_2/contribution_3	=	歸納統整過去專案使用的元件與規則，建立設計系統
project_2/background	=	背景與問題
project_2/background_text_1	=	公司推出了新的硬體產品 Remote IO，可以遠程控制與接收終端設備數值。Remote IO 在市面上已應用於各種產業，包括水箱深度、報警開關、能源管理系統等。為了讓安裝人員可以直接在現場使用手機連接 Remote IO 進行設定與測試，需要開發一款專屬它的 App，接收各種輸入和輸出，在手機上管理、診斷、操作和監控設備。
project_2/result	=	結果
project_2/result_title_1	=	密切與App及韌體工程師溝通，跨部門合作融洽
project_2/result_text_1	=	從前期的點位了解就開始與韌體部門溝通合作，到中期設計與後期開發，彼此都保持有疑問就溝通的原則，緊密的合作關係讓負責此產品的每一個人都更安心與踏實。
project_2/result_title_2	=	建立 App design system，維持公司產品一致性，加速未來擴充與修改
project_2/result_text_2	=	搜集、整理及比較過去所有專案使用過的元件，設計一套公司的設計系統。提升公司品牌意識、加速未來開發時間。
project_2/challenge	=	挑戰
project_2/challenge_title_1	=	理解 Modbus table ，與工程師溝通
project_2/challenge_text_1	=	對於硬體與韌體非常不熟悉的我，看到 Modbus table 時真的眼花撩亂，完全不知道從哪裡開始閱讀。在工程師大致解釋後，一個一個點位了解其代表的意思和可以有什麼操作。而單純看 Modbus table 其實很難理解其中的連動性，因此常常與工程師再進一步了解有哪些細節與實際生活中的範例。
project_2/challenge_title_2	=	使用情境模糊，沒有具體場景
project_2/challenge_text_2	=	公司推出新的硬體產品，但尚未找到其具體使用的場景。這對於設計師來說非常難著手進行設計，在了解產品與每個點位時不停詢問PM與工程師這些點位可能運用在哪些設備與哪些情境，試圖拼湊出可能的場景。
project_2/process	=	流程
project_2/research	=	理解與研究
project_2/research_text_1	=	一方面理解點位的意思，一方面也針對競品的產品架構進行分析，了解其在連接時分別考量的重點。有一些競品同時提供 Web 和 App 可以設定，本研究只關注在 App。
project_2/research_text_2	=	在分析中發現了三種模式，第一種是完全劃分派，將輸入及輸出分開，接收數據與下控功能也分開；第二種完全結派，所有資料一次列出，包含下控也在同一個頁面可以操作；第三種則是分輸入輸出派。
project_2/research_text_3	=	與PM及工程師討論後，考慮了未來可能硬體規格升級，及藍芽問點位的速度，
project_2/research_text_4	=	決定將頁面分成輸入與輸出，以縮短使用者使用藍芽連接時，數據回傳的等待時間。
project_2/framework	=	定義架構
project_2/framework_text	=	整合討論結果與工程師們的實際經驗，整理出 Remote IO 的架構圖，並利用 Wireflow 讓團隊理解流程及未來可能的樣貌，並再次確認是否有遺漏的地方。
project_2/framework_title_1	=	資訊架構
project_2/framework_title_2	=	草稿流程
project_2/design_guideline	=	設計規範
project_2/design_guideline_text_1	=	原本公司有分 iOS 及 Android 系統，因後續政策改採用 React native 進行開發。我將過往 App 使用過的元件整理歸納，並比較 RN 套件後，與前端工程師進行討論，最後決定採用 react-native-elements 作為基底，看情況搭配其他套件，進行公司設計系統的規劃與設計。
project_2/design_guideline_text_2	=	因設計系統與 Remote IO App 需要同時進行，建立完基本元件後便開始進行產品設計，以邊設計邊迭代的方式前進，並記錄設計系統的 Change log。
project_2/final_design	=	設計
project_2/final_design_title_1	=	關聯複雜的 Input、Output 頁面
project_2/final_design_text_1	=	Input 與 Output 功能是我跟工程師們花最多時間討論的部分，彼此同步過點位表與意義後，我便開始進行設計與交付。很多小問題都是在實際開發時才發現，像是點位之間有連動關係、主副線有條件的連動關係等。開發階段，我們每週都會同步資訊，有更新或改動都互相通知，若有上新版我也會進行測試與回報。
project_2/final_design_title_2	=	讓 QA 可以快速測試的工程模式
project_2/final_design_text_2	=	QA 除了可以使用一般版介面做測試，也可以使用工程模式，一次看到所有數值，進行快速的排查與驗證。工程模式不需要過多的資訊，只需要單純的讀取跟寫入，以確認資料解析無誤。
project_2/final_design_title_3	=	FOTA (Firmware Over-the-Air)
project_2/final_design_text_3	=	第一次接觸 FOTA (Firmware Over-the-Air) 流程，在設計每一個環節時，都要考慮到目前是只用藍芽連線還是無線網路，可以要到什麼資料，無法取得哪些資料，目前有哪些資訊可以讓使用者了解目前狀況。
project_2/take_away	=	學到什麼
project_2/take_away_title_1	=	首次與韌體工程師合作，密切溝通不會錯
project_2/take_away_text_1	=	初期完全聽不懂韌體工程師們的專案術語，持續了解與詢問每個點位的意思後，才慢慢能夠與他們溝通。韌體部門看的東西與軟體部門很不一樣，可以提供對於硬體上更專業的建議與情境，甚至他們也有自己對於競品的分析與看法，可以讓我從不同角度看產品。
project_2/take_away_text_1-2	=	雖然跟不同部門合作一開始會需要磨合，在了解彼此立場與目標後，都能夠為產品帶來更多正面的影響。
project_2/take_away_title_2	=	敏捷開發，且戰且走的前進
project_2/take_away_text_2	=	一開始做設計時，會希望需求情境可以趕快明朗，最好不要再有變數。當然有夢最美，唯一不變的就是一直在改變。因此，這次團隊採用敏捷開發方式，除了每天站會，工程師每一到兩週會發佈一個新版，我與PM會進行測試，再將問題提給工程師。這樣即時的溝通與討論，讓彼此都更了解產品走向與細節，確保最後產品是想像中的模樣。
project_2/take_away_title_3	=	了解點位及不同連接方式的限制與應用，善用比喻讓聽眾了解
project_2/take_away_text_3	=	在跟韌體及軟體工程師了解每個點位的意思時，工程師會想盡辦法拿生活中的例子來解釋，讓不熟悉的人了解其運作。在這次的經驗中，感受到說故事能力與提出有共感事件的重要性，這也幫助我在未來若遇到較難以理解的內容時，可以善用比喻的魔力讓人理解。



project_3/project_title	=	設計系統
project_3/team	=	團隊
project_3/team_text	=	1 專案經理、1 前端工程師
project_3/role	=	角色
project_3/role_text	=	產品負責人、UI/UX 設計師
project_3/time	=	時間
project_3/time_text	=	2021-2022
project_3/contribution	=	貢獻
project_3/contribution_1	=	歸納統整過去專案使用的元件與規則，建立設計系統
project_3/contribution_2	=	規劃開發進度、測試與確保品質
project_3/contribution_3	=	提升團隊 UI/UX 成熟度
project_3/background	=	背景與問題
project_3/background_text_1	=	公司過去開發以客制為主，每次專案都使用不同的框架、不同 Design guideline。後期專案維護上，工程師人力缺乏，又必須熟悉所有使用過的框架及套件內容，才能順利進行修改，包含了人力與流程上的問題。因此，我們決定開發公司自己的設計系統，以解決人力及未來流程、維護的問題。
project_3/background_text_2	=	依據開發經驗及社群活躍度，決定以MUI為基礎，再針對公司需求進行設計，維持公司形象識別一制性與開發規範。
project_3/result	=	結果
project_3/result_title_1	=	建立團隊對於使用元件與操作的默契，加速設計與開發速度
project_3/result_text_1	=	跟工程師一起建立完設計系統後，彼此對元件都有一定的熟悉度，在溝通上也更有默契，通常只需要簡單描述就知道在說哪個元件，不僅加速開發速度，也降低了溝通成本。
project_3/result_title_2	=	提升團隊 UI/UX 成熟度
project_3/result_text_2	=	導入設計系統，讓團隊有設計系統的概念，也體驗其帶來的便利。從設計系統開始建立 設計營運文化。
project_3/result_title_3	=	提升公司產品識別、維持形象一致性
project_3/result_text_3	=	公司擁有自己的一套設計系統後，讓產品與專案在視覺及操作上保有一致性，提升公司品牌識別，並作為提供給外包商的開發規範，確保開發品質與形象。
project_3/challenge	=	挑戰
project_3/challenge_title_1	=	優先順序較低，難以推動
project_3/challenge_text_1	=	設計系統屬於內部案，在沒有實際收入與人力不足的狀況下，開發的優級順序被安排在較後面。當團隊決定要開發設計系統後，我便開始研究該如何進行，並與工程師討論時程規劃。前期因其他專案卡關時，我仍然每個月會提起這件事情，讓團隊知道我們還是要持續進行設計系統的開發，這能幫助我們之後的流程。後期時間允許的狀況下，加緊腳步每週與工程師進行討論。
project_3/challenge_title_2	=	一人設計的不安與懷疑
project_3/challenge_text_2	=	在開始設計系統開發之前，還是有許多疑問，包含一人設計需要設計系統嗎? 怎麼開始? 公司這麼多專案、這麼多用法怎麼整合? 在看完許多前輩的文章和影片後，有了更明確的方向，也在設計階段，預約 ADPList 上的 Mentor 詢問實際製作設計系統會遇到的問題與細節。
project_2/process	=	流程
project_3/research	=	研究探索
project_3/research_title_1	=	外部參考
project_3/research_text_1	=	大方向參考各大公司 Design system 包含哪些內容與其架構。蒐集整理完公司元件後，再針對想探索的 UI 元件進行細部參考與分析，從中了解產品與設計系統的關係，並獲得靈感。
project_3/research_text_2	=	參考公司包含 Material-ui, Microsoft Fluent, Spotify, Atlassian, Shopify, SAP, IBM... 
project_3/inventory	=	搜集與計畫
project_3/inventory_title_1	=	蒐集整理元件
project_3/inventory_text_1	=	為了蒐集及整理公司過往專案的所有元件，先在 figma 建立好各元件名稱的頁面，將截圖分類到各頁面，進行比較與分析，歸納出公司最常使用的類型作為第一階段設計與開發。
project_3/inventory_title_2	=	框架挑選、套件選擇
project_3/inventory_text_2	=	公司使用過 Ｍaterial UI、 Microsoft Fluent UI、Ant design，與工程師討論後，考慮到變化修改彈性與社群討論活躍度，決定採用 Ｍaterial UI 作為基礎框架。
project_3/inventory_text_2_2	=	若元件滿足不了需求時，再進行額外套件的挑選，也以多人使用及討論度高的為優先。
project_3/inventory_title_3	=	時程安排
project_3/inventory_text_3	=	跟工程師討論完第一階段製作範圍後，便開始安排設計與開發時程。每一到兩週都會討論目前進度，與需要修改的部分。
project_3/inventory_text_3_2	=	曾經因為其他專案時程與人員變動而停滯，所幸有建立討論文件與 Change log 讓自己與接手的工程師可以喚起記憶與了解過去討論事項。
project_3/design_iterate	=	設計、開發與迭代
project_3/design_iterate_text_1	=	在設計上若發現使用的框架無法滿足時，會直接與工程師討論，一起評估套件後，決定一個方向以利繼續推進。後續開發若遇到問題，可以藉由文件紀錄回頭查看當時的困難與結論，以評估是否需要重新挑選套件。
project_3/design_iterate_text_2	=	工程師完成開發後，會在團隊共同文件中修改狀態，當看到狀態被修改時，我就會到 Storybook 進行檢視與測試，若有問題一樣到共同文件中留言討論。團隊使用 Storybook，讓大家可以看到工程師實作出來的 UI components，也可以附上元件的介紹與使用方法，提供其他同事與外包商使用。
project_3/final_design	=	最終設計
project_3/final_design_text	=	
project_3/take_away	=	學到什麼
project_3/take_away_title_1	=	擔任產品負責人，換位子換腦袋
project_3/take_away_text_1	=	藉由這一次規劃公司設計系統的機會，擔任這項產品的主導人，負責產品的規劃、設計、追蹤與品質管理，並實際與工程師合作打造出設計系統。在設計系統大致成型後，回想過程真的有非常多細節沒有考慮到，直到開發當下才發現。不只 UI 元件的細節需要把關，連自己與工程師的時程、其他專案的時程、未來對內對外的應用等問題都要須考量。當身為專案的設計師時，可以全心投入設計的部分；但成為產品負責人時，需要考慮與處理的面向更廣更雜，主管也會適時的協助方向調整，是一個很棒的學習機會。
project_3/take_away_title_2	=	善用 80/20 法則，先做可以解決 80% 問題的事情
project_3/take_away_text_2	=	當初參考完許多公司的設計系統後，有一個非常想要做出那麼專業又詳細的設計系統的夢。而在人力限制、時間成本與公司需求上，我們並不需要那麼龐大的系統，元件也不需要從頭自己建立。在夢碎之後，先搞清楚目前的情境、擁有什麼資源、要解決什麼事情，針對這些問題提供一個可以解決 80% 問題的方案，其他少數情況則當作第二階段的內容。這次經驗後，在設計其他功能時，也常運用 80/20 法則，讓資源發揮最大化。


project_4/project_title	=	智慧隧道路燈設計經驗
project_4/team	=	團隊
project_4/team_text	=	1 專案經理、1 前端工程師、1 後端工程師
project_4/role	=	角色
project_4/role_text	=	UI/UX 設計師
project_4/time	=	時間
project_4/time_text	=	2021-2022
project_4/contribution	=	貢獻
project_4/contribution_1	=	研究隧道路燈的設計與規範並分享給團隊
project_4/contribution_2	=	提出符合一般路燈及隧道路燈使用的調燈功能
project_4/background	=	背景與問題
project_4/background_text_1	=	隧道照明的目的在確保駕駛者於行駛隧道時，能獲致與鄰接道路相同之行車安全與舒適程度。隧道照明能提供良好的視覺條件，以提高交通效率，降低「黑洞效應」（Black hole effect），同時幫助用路人看清周圍環境，辨別障礙物，減少交通事故。
project_4/background_text_2	=	公司原有平台為一般路燈使用，因應隧道照明與一般路燈之差異，需加入能滿足隧道調燈之功能。依據晝夜不同時段，配合隧道洞外輝度量測值，在系統設定監控數值，系統將自動偵測及調整隧道內部照明，提供適當亮度及節省能源，進而降低隧道照明的營運成本。
project_4/result	=	結果
project_4/result_title_1	=	奠定團隊前期研究傳統
project_4/result_text_1	=	此專案關乎到較複雜的領域知識及時程要求，曾因前期的研究不透徹，而產出不符合需求的設計，反而歷經多次程式修改。經過此次經驗後，奠定了團隊在開始設計前的研究工作，儘管只是二手資料的參考與了解，經過互相分享後，都能為團隊帶來對此領域更深的認識。
project_4/challenge	=	挑戰
project_4/challenge_title_1	=	無相關領域經驗
project_4/challenge_text_1	=	隧道照明的設計與規範相比一般路燈差異極大，在沒有領域知識與相關經驗下，我們在前期的設計與規劃上有一個大門檻。
project_4/challenge_title_2	=	以最小影響範圍新增功能
project_4/challenge_text_2	=	在不影響原專案(一般路燈)使用的情況下，以舊系統為基底，新增隧道照明的調燈功能。需保持原本介面樣式及操作模式，以減少前後端開發時間。
project_4/process	=	流程
project_4/process_text	=	由於是全新的領域，公司沒有經驗，也無法聘請專家。利用一些時間了解隧道照明的起源與注意事項，發展出第一版 wireframe，與 PM、工程師討論後發現有些困惑的地方，再進行了好幾次的研究與競品分析，與工程師一起評估原有程式的邏輯與限制，修改多版後，才定調了最後的調燈方式。
project_4/research	=	研究與評估
project_4/research_title_1	=	桌面研究
project_4/research_text_1	=	為預防黑洞現象，依據「隧道照明標準」，配合隧道長度可分為接近區(Access zone)、進口區(Threshold zone)、漸變區(Transition zone)、內部區(Interior zone)與出口區(Exit)路段。本專案目標為讓隧道燈能夠根據輝度計讀值進行亮度調整，在此不考慮其他影響因素(車流量、道路鋪面材質等），我們了解到需要讓每一盞燈都有屬於的區域，每個一區域都有自己的輝度均值，燈的亮度會隨著輝度計讀值自動進行調整。
project_4/research_title_2	=	競品分析
project_4/research_text_2	=	根據競品分析，發現目前市場上，依據不同場域會分開功能與設定，較少使用同一系統及介面涵蓋多種情境調燈。依據公司目前專案內容與未來彈性，我們決定未來將不同場域情境的調燈模發展成模板，提供未來客戶選擇使用。這部分需要較多人力，為了在時程內完成，前端採用原有UI設計，以不新增新元件為主，以及符合原有系統操作邏輯進行新功能的設計。
project_4/research_title_3	=	邏輯流程
project_4/design_iterate	=	設計迭代
project_4/design_iterate_text	=	經過與工程師多次溝通修改後，才完整了整個功能邏輯架構，一開始設計時常以理想情況進行設計，沒考慮到資料邏輯，包含日期是否含年，不含年閏年該執行什麼，沒設定到的日期要執行什麼規則、時間是否跨日、i18n 語言切換顯示等問題。雖然每次都只是介面上的小修改，但對於程式的判斷來說都是大改動。
project_4/final_design	=	最終設計
project_4/final_design_text	=符合使用者的用語與操作
發展一般與隧道路燈模板
以最小影響範圍新增功能，含前端、後端
project_4/test	=	實際上電測試
project_4/test_text	=	公司內部測試是我覺得很有趣的環節，可以在公司看到各種裝置連上平台，與實際使用的狀況。也可以觀察到其他同事在操作時的狀況，進行近一步的調整。
project_4/take_away	=	學到什麼
project_4/take_away_title_1	=	工程思考，降低邏輯漏洞
project_4/take_away_text_1	=	與工程師多次來回討論後，發現有很多邏輯漏洞，許多 edge case 沒考慮到。藉由這次機會詢問工程師們是如何進行問題解構，有點像考慮頁面的6種狀態，要知道每一個搭配下會產生的結果，這對我來說是一個非常棒的學習機會，讓我更懂得如何分析問題與理解工程師的思考方式。
project_4/take_away_title_2	=	累積快速入門陌生領域的能力
project_4/take_away_text_2	=	公司屬接案性質，每次遇到的挑戰雖然不離 IoT，但 domain knowhow 仍大徑相庭，為了能快速了解陌生領域，大量閱讀相關資料是最快速且方便的方式，再針對相似產品進行競品分析，並進一步與同事討論，快速交換意見，讓彼此更熟悉此案內容。也因為此次的多次修改，讓團隊了解到前期透徹了解的重要，在開始開發前會先再。